package hasher

import (
	"encoding/base64"
	"testing"
)

func TestPHashHandler(t *testing.T) {
	image := ""

	base64Text := make([]byte, base64.StdEncoding.DecodedLen(len(image)))
	_, err := base64.StdEncoding.Decode(base64Text, []byte(image))
	if err != nil {
		t.Errorf("PHashHandler.Hash() error = %v", err)
	}

	tests := []struct {
		name    string
		image   []byte
		wantErr bool
		want    string
	}{
		{
			name:    "should return error when image is invalid",
			image:   []byte("invalid"),
			wantErr: true,
		},
		{
			name:    "should return error when image is nil",
			image:   nil,
			wantErr: true,
		},
		{
			name:    "should return hash when image is valid",
			image:   base64Text,
			wantErr: false,
			want:    "p:d4858f6fff100079",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			handler := NewPHashHandler()
			got, err := handler.Hash(tt.image)
			if (err != nil) != tt.wantErr {
				t.Errorf("PHashHandler.Hash() error = %v, wantErr %v", err, tt.wantErr)
				return
			}

			if got == "" && !tt.wantErr {
				t.Errorf("PHashHandler.Hash() = %v, want %v", got, tt.want)
			}
		})
	}
}
